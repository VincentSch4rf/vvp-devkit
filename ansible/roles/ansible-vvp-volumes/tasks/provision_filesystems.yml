# -*- encoding: utf-8 -*- 
# ============LICENSE_START======================================================= 
# org.onap.vvp/engagementmgr
# ===================================================================
# Copyright © 2017 AT&T Intellectual Property. All rights reserved.
# ===================================================================
#
# Unless otherwise specified, all software contained herein is licensed
# under the Apache License, Version 2.0 (the “License”);
# you may not use this software except in compliance with the License.
# You may obtain a copy of the License at
#
#             http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
#
# Unless otherwise specified, all documentation contained herein is licensed
# under the Creative Commons License, Attribution 4.0 Intl. (the “License”);
# you may not use this documentation except in compliance with the License.
# You may obtain a copy of the License at
#
#             https://creativecommons.org/licenses/by/4.0/
#
# Unless required by applicable law or agreed to in writing, documentation
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ============LICENSE_END============================================
#
# ECOMP is a trademark and service mark of AT&T Intellectual Property.
---
- debug:
    msg: "{{volume}}"

- name: map RBD  | Provision Filesystem
  shell: rbd map {{volume.mount}}
  register: result

- set_fact: block_device="{{result.stdout}}"

- name: Get device Format | Provision Filesystems
  shell: parted {{block_device}} print | grep 'Partition Table:'
  register: result

- set_fact:
    is_formatted: false
  when: result.stdout.find('unknown') != -1

- set_fact:
    is_formatted: true
  when: result.stdout.find('loop') != -1

- name: Format block devices | Provision Filesystems
  shell: mkfs.{{volume.type}} {{block_device}}
  when: not is_formatted

- name: mount RBD | Provision Filesystems
  mount:
    src: "{{block_device}}"
    # TODO: 2.3 uses "path" instead of "name"
    name: /tmp/mnt/{{volume.mount}}
    fstype: xfs
    state: mounted

- name: create directories | Provision Filesystems
  file:
    path: /tmp/mnt/{{volume.mount}}/{{dir.name|default(dir)}}
    state: directory
    owner: "{{dir.owner|default('root')}}"
    group: "{{dir.group|default('root')}}"
    recurse: yes
  with_items: "{{volume.directories}}"
  loop_control:
    loop_var: dir

- name: unmount RBD | Provision Filesystems
  mount:
    src: "{{block_device}}"
    # TODO: 2.3 uses "path" instead of "name"
    name: /tmp/mnt/{{volume.mount}}
    state: unmounted

- name: remove RBD from fstab | Provision Filesystems
  mount:
    src: "{{block_device}}"
    # TODO: 2.3 uses "path" instead of "name"
    name: /tmp/mnt/{{volume.mount}}
    state: absent

- name: unmap RBD | Provision Filesystems
  shell: rbd unmap {{volume.mount}}
